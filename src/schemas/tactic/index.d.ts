import * as yup from "yup";
import { ActionTactic } from "./action";
import { AffirmationTactic } from "./affirmation";
import { AudioTactic } from "./audio";
import { BreathingExerciseTactic } from "./breathingExercise";
import { ImageTactic } from "./image";
import { LinkTactic } from "./link";
import { SupportGroupTactic } from "./supportGroup";
import { VideoTactic } from "./video";
export * from "./action";
export * from "./affirmation";
export * from "./audio";
export * from "./breathingExercise";
export * from "./image";
export * from "./link";
export * from "./supportGroup";
export * from "./video";
export declare const tacticSchemas: {
    action: yup.ObjectSchema<{
        id: string | undefined;
        type: "action";
        title: string | undefined;
        description: string | undefined;
        durationSeconds: number | undefined;
        imageAttachment: {
            sizeBytes?: number | undefined;
            metadata?: {
                width?: number | undefined;
                height?: number | undefined;
                durationMs?: number | undefined;
                transcript?: string | undefined;
            } | undefined;
            type: NonNullable<"audio" | "image" | "video" | "document" | undefined>;
            uri: string;
            storagePath: string;
            contentType: string;
        } | undefined;
        allBehaviors: boolean | undefined;
        behaviorIds: string[] | undefined;
        routineIds: string[] | undefined;
        ordinal: number;
        userId: string | undefined;
        createdBy: string | undefined;
        supportGroupId: string | undefined;
        isPublic: boolean | undefined;
        createdAt: import("../../types").Timestamp | undefined;
        updatedAt: import("../../types").Timestamp | undefined;
    }, yup.AnyObject, {
        id: undefined;
        type: undefined;
        title: undefined;
        description: undefined;
        durationSeconds: undefined;
        imageAttachment: undefined;
        allBehaviors: undefined;
        behaviorIds: "";
        routineIds: "";
        ordinal: undefined;
        userId: undefined;
        createdBy: undefined;
        supportGroupId: undefined;
        isPublic: undefined;
        createdAt: undefined;
        updatedAt: undefined;
    }, "">;
    affirmation: yup.ObjectSchema<{
        id: string | undefined;
        type: "affirmation";
        title: string | undefined;
        description: string | undefined;
        durationSeconds: number | undefined;
        imageAttachment: {
            sizeBytes?: number | undefined;
            metadata?: {
                width?: number | undefined;
                height?: number | undefined;
                durationMs?: number | undefined;
                transcript?: string | undefined;
            } | undefined;
            type: NonNullable<"audio" | "image" | "video" | "document" | undefined>;
            uri: string;
            storagePath: string;
            contentType: string;
        } | undefined;
        allBehaviors: boolean | undefined;
        behaviorIds: string[] | undefined;
        routineIds: string[] | undefined;
        ordinal: number;
        userId: string | undefined;
        createdBy: string | undefined;
        supportGroupId: string | undefined;
        isPublic: boolean | undefined;
        createdAt: import("../../types").Timestamp | undefined;
        updatedAt: import("../../types").Timestamp | undefined;
    }, yup.AnyObject, {
        id: undefined;
        type: undefined;
        title: undefined;
        description: undefined;
        durationSeconds: undefined;
        imageAttachment: undefined;
        allBehaviors: undefined;
        behaviorIds: "";
        routineIds: "";
        ordinal: undefined;
        userId: undefined;
        createdBy: undefined;
        supportGroupId: undefined;
        isPublic: undefined;
        createdAt: undefined;
        updatedAt: undefined;
    }, "">;
    audio: yup.ObjectSchema<{
        id: string | undefined;
        type: "audio";
        title: string | undefined;
        description: string | undefined;
        durationSeconds: number | undefined;
        imageAttachment: {
            sizeBytes?: number | undefined;
            metadata?: {
                width?: number | undefined;
                height?: number | undefined;
                durationMs?: number | undefined;
                transcript?: string | undefined;
            } | undefined;
            type: NonNullable<"audio" | "image" | "video" | "document" | undefined>;
            uri: string;
            storagePath: string;
            contentType: string;
        } | undefined;
        allBehaviors: boolean | undefined;
        behaviorIds: string[] | undefined;
        routineIds: string[] | undefined;
        ordinal: number;
        userId: string | undefined;
        createdBy: string | undefined;
        supportGroupId: string | undefined;
        isPublic: boolean | undefined;
        createdAt: import("../../types").Timestamp | undefined;
        updatedAt: import("../../types").Timestamp | undefined;
        audioAttachment: {
            sizeBytes?: number | undefined;
            metadata?: {
                width?: number | undefined;
                height?: number | undefined;
                durationMs?: number | undefined;
                transcript?: string | undefined;
            } | undefined;
            type: NonNullable<"audio" | "image" | "video" | "document" | undefined>;
            uri: string;
            storagePath: string;
            contentType: string;
        };
    }, yup.AnyObject, {
        id: undefined;
        type: undefined;
        title: undefined;
        description: undefined;
        durationSeconds: undefined;
        imageAttachment: undefined;
        allBehaviors: undefined;
        behaviorIds: "";
        routineIds: "";
        ordinal: undefined;
        userId: undefined;
        createdBy: undefined;
        supportGroupId: undefined;
        isPublic: undefined;
        createdAt: undefined;
        updatedAt: undefined;
        audioAttachment: {
            uri: undefined;
            storagePath: undefined;
            contentType: undefined;
            sizeBytes: undefined;
            type: undefined;
            metadata: {
                width: undefined;
                height: undefined;
                durationMs: undefined;
                transcript: undefined;
            };
        };
    }, "">;
    breathingExercise: yup.ObjectSchema<{
        id: string | undefined;
        type: "breathingExercise";
        title: string | undefined;
        description: string | undefined;
        durationSeconds: number;
        imageAttachment: {
            sizeBytes?: number | undefined;
            metadata?: {
                width?: number | undefined;
                height?: number | undefined;
                durationMs?: number | undefined;
                transcript?: string | undefined;
            } | undefined;
            type: NonNullable<"audio" | "image" | "video" | "document" | undefined>;
            uri: string;
            storagePath: string;
            contentType: string;
        } | undefined;
        allBehaviors: boolean | undefined;
        behaviorIds: string[] | undefined;
        routineIds: string[] | undefined;
        ordinal: number;
        userId: string | undefined;
        createdBy: string | undefined;
        supportGroupId: string | undefined;
        isPublic: boolean | undefined;
        createdAt: import("../../types").Timestamp | undefined;
        updatedAt: import("../../types").Timestamp | undefined;
    }, yup.AnyObject, {
        id: undefined;
        type: undefined;
        title: undefined;
        description: undefined;
        durationSeconds: undefined;
        imageAttachment: undefined;
        allBehaviors: undefined;
        behaviorIds: "";
        routineIds: "";
        ordinal: undefined;
        userId: undefined;
        createdBy: undefined;
        supportGroupId: undefined;
        isPublic: undefined;
        createdAt: undefined;
        updatedAt: undefined;
    }, "">;
    image: yup.ObjectSchema<{
        id: string | undefined;
        type: "image";
        title: string | undefined;
        description: string | undefined;
        durationSeconds: number | undefined;
        imageAttachment: {
            sizeBytes?: number | undefined;
            metadata?: {
                width?: number | undefined;
                height?: number | undefined;
                durationMs?: number | undefined;
                transcript?: string | undefined;
            } | undefined;
            type: NonNullable<"audio" | "image" | "video" | "document" | undefined>;
            uri: string;
            storagePath: string;
            contentType: string;
        };
        allBehaviors: boolean | undefined;
        behaviorIds: string[] | undefined;
        routineIds: string[] | undefined;
        ordinal: number;
        userId: string | undefined;
        createdBy: string | undefined;
        supportGroupId: string | undefined;
        isPublic: boolean | undefined;
        createdAt: import("../../types").Timestamp | undefined;
        updatedAt: import("../../types").Timestamp | undefined;
    }, yup.AnyObject, never, "">;
    link: yup.ObjectSchema<{
        id: string | undefined;
        type: "link";
        title: string | undefined;
        description: string | undefined;
        durationSeconds: number | undefined;
        imageAttachment: {
            sizeBytes?: number | undefined;
            metadata?: {
                width?: number | undefined;
                height?: number | undefined;
                durationMs?: number | undefined;
                transcript?: string | undefined;
            } | undefined;
            type: NonNullable<"audio" | "image" | "video" | "document" | undefined>;
            uri: string;
            storagePath: string;
            contentType: string;
        } | undefined;
        allBehaviors: boolean | undefined;
        behaviorIds: string[] | undefined;
        routineIds: string[] | undefined;
        ordinal: number;
        userId: string | undefined;
        createdBy: string | undefined;
        supportGroupId: string | undefined;
        isPublic: boolean | undefined;
        createdAt: import("../../types").Timestamp | undefined;
        updatedAt: import("../../types").Timestamp | undefined;
        data: {
            url: string;
        };
    }, yup.AnyObject, {
        id: undefined;
        type: undefined;
        title: undefined;
        description: undefined;
        durationSeconds: undefined;
        imageAttachment: undefined;
        allBehaviors: undefined;
        behaviorIds: "";
        routineIds: "";
        ordinal: undefined;
        userId: undefined;
        createdBy: undefined;
        supportGroupId: undefined;
        isPublic: undefined;
        createdAt: undefined;
        updatedAt: undefined;
        data: {
            url: undefined;
        };
    }, "">;
    supportGroup: yup.ObjectSchema<{
        id: string | undefined;
        type: "supportGroup";
        title: string | undefined;
        description: string | undefined;
        durationSeconds: number | undefined;
        imageAttachment: {
            sizeBytes?: number | undefined;
            metadata?: {
                width?: number | undefined;
                height?: number | undefined;
                durationMs?: number | undefined;
                transcript?: string | undefined;
            } | undefined;
            type: NonNullable<"audio" | "image" | "video" | "document" | undefined>;
            uri: string;
            storagePath: string;
            contentType: string;
        } | undefined;
        allBehaviors: boolean | undefined;
        behaviorIds: string[] | undefined;
        routineIds: string[] | undefined;
        ordinal: number;
        userId: string | undefined;
        createdBy: string | undefined;
        supportGroupId: string | undefined;
        isPublic: boolean | undefined;
        createdAt: import("../../types").Timestamp | undefined;
        updatedAt: import("../../types").Timestamp | undefined;
        data: {
            supportGroupDoc?: import("../../utils").DocumentReferenceLike<unknown> | undefined;
            defaultMessage: string;
        };
    }, yup.AnyObject, {
        id: undefined;
        type: undefined;
        title: undefined;
        description: undefined;
        durationSeconds: undefined;
        imageAttachment: undefined;
        allBehaviors: undefined;
        behaviorIds: "";
        routineIds: "";
        ordinal: undefined;
        userId: undefined;
        createdBy: undefined;
        supportGroupId: undefined;
        isPublic: undefined;
        createdAt: undefined;
        updatedAt: undefined;
        data: {
            supportGroupDoc: undefined;
            defaultMessage: undefined;
        };
    }, "">;
    video: yup.ObjectSchema<{
        id: string | undefined;
        type: "video";
        title: string | undefined;
        description: string | undefined;
        durationSeconds: number | undefined;
        imageAttachment: {
            sizeBytes?: number | undefined;
            metadata?: {
                width?: number | undefined;
                height?: number | undefined;
                durationMs?: number | undefined;
                transcript?: string | undefined;
            } | undefined;
            type: NonNullable<"audio" | "image" | "video" | "document" | undefined>;
            uri: string;
            storagePath: string;
            contentType: string;
        };
        allBehaviors: boolean | undefined;
        behaviorIds: string[] | undefined;
        routineIds: string[] | undefined;
        ordinal: number;
        userId: string | undefined;
        createdBy: string | undefined;
        supportGroupId: string | undefined;
        isPublic: boolean | undefined;
        createdAt: import("../../types").Timestamp | undefined;
        updatedAt: import("../../types").Timestamp | undefined;
        videoAttachment: {
            sizeBytes?: number | undefined;
            metadata?: {
                width?: number | undefined;
                height?: number | undefined;
                durationMs?: number | undefined;
                transcript?: string | undefined;
            } | undefined;
            type: NonNullable<"audio" | "image" | "video" | "document" | undefined>;
            uri: string;
            storagePath: string;
            contentType: string;
        };
    }, yup.AnyObject, never, "">;
};
export declare const tacticSchema: yup.Lazy<Tactic, yup.AnyObject, any>;
export declare const tacticIsActionTactic: (value: Tactic) => value is ActionTactic;
export declare const isValidActionTactic: (value: unknown) => value is ActionTactic;
export declare const tacticIsAffirmationTactic: (value: Tactic) => value is AffirmationTactic;
export declare const isValidAffirmationTactic: (value: unknown) => value is AffirmationTactic;
export declare const tacticIsAudioTactic: (value: Tactic) => value is AudioTactic;
export declare const isValidAudioTactic: (value: unknown) => value is AudioTactic;
export declare const tacticIsImageTactic: (value: Tactic) => value is ImageTactic;
export declare const isValidImageTactic: (value: unknown) => value is ImageTactic;
export declare const tacticIsLinkTactic: (value: Tactic) => value is LinkTactic;
export declare const isValidLinkTactic: (value: unknown) => value is LinkTactic;
export declare const tacticIsSupportGroupTactic: (value: Tactic) => value is SupportGroupTactic;
export declare const isValidSupportGroupTactic: (value: unknown) => value is SupportGroupTactic;
export declare const tacticIsBreathingExerciseTactic: (value: Tactic) => value is BreathingExerciseTactic;
export declare const isValidBreathingExerciseTactic: (value: unknown) => value is BreathingExerciseTactic;
export declare const tacticIsVideoTactic: (value: Tactic) => value is VideoTactic;
export declare const isValidVideoTactic: (value: unknown) => value is VideoTactic;
export type Tactic = ActionTactic | AffirmationTactic | AudioTactic | ImageTactic | LinkTactic | SupportGroupTactic | VideoTactic | BreathingExerciseTactic;
